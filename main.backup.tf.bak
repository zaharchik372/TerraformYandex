############################################
# Data: свежий образ Ubuntu по семейству
############################################
data "yandex_compute_image" "ubuntu" {
  family = "ubuntu-2404-lts"
}

############################################
# Сеть и подсеть
############################################
resource "yandex_vpc_network" "demo" {
  name = "hexlet-demo-net"
}

# Security Group для веб/SSH/Netdata
resource "yandex_vpc_security_group" "web" {
  name       = "hexlet-sg-web"
  network_id = yandex_vpc_network.demo.id

  # SSH
  ingress {
    protocol       = "TCP"
    description    = "SSH"
    port           = 22
    v4_cidr_blocks = var.trusted_cidrs
  }

  # HTTP
  ingress {
    protocol       = "TCP"
    description    = "HTTP"
    port           = 80
    v4_cidr_blocks = var.trusted_cidrs
  }

  # Netdata
  ingress {
    protocol       = "TCP"
    description    = "Netdata"
    port           = var.netdata_port
    v4_cidr_blocks = var.trusted_cidrs
  }

  # Исходящий трафик
  egress {
    protocol       = "ANY"
    description    = "All outbound"
    from_port      = 0
    to_port        = 65535
    v4_cidr_blocks = var.trusted_cidrs
  }
}

# Security Group для Postgres (разрешаем 5432 из нашей подсети)
resource "yandex_vpc_security_group" "db" {
  name       = "hexlet-sg-db"
  network_id = yandex_vpc_network.demo.id

  # Подключения к Postgres из нашей подсети
  ingress {
    protocol       = "TCP"
    description    = "PostgreSQL"
    port           = 5432
    v4_cidr_blocks = [var.vpc_cidr]
  }

  # Исходящий трафик (обновления и пр.)
  egress {
    protocol       = "ANY"
    description    = "All outbound"
    from_port      = 0
    to_port        = 65535
    v4_cidr_blocks = ["0.0.0.0/0"]
  }
}

# Подсеть
resource "yandex_vpc_subnet" "demo_a" {
  name           = "hexlet-demo-subnet-a"
  zone           = var.zone
  network_id     = yandex_vpc_network.demo.id
  v4_cidr_blocks = [var.vpc_cidr]
}

############################################
# Managed PostgreSQL кластер
############################################

# resource "yandex_mdb_postgresql_cluster" "db" {
#   name               = "hexlet-demo-db"
#   environment        = "PRESTABLE" # для тестов; для боевых — "PRODUCTION"
#   network_id         = yandex_vpc_network.demo.id
#   security_group_ids = [yandex_vpc_security_group.db.id]

#   config {
#     version = "15"

#     resources {
#       resource_preset_id = "b1.medium" # 2 vCPU, 4GB RAM
#       disk_type_id       = "network-ssd"
#       disk_size          = 20
#     }

#     # В этой версии провайдера это АРГУМЕНТ, а не блок
#     postgresql_config = {
#       max_connections = 100
#     }
#   }

#   # База
#   database {
#     name  = var.db_name
#     owner = var.db_user
#   }

#   # Пользователь
#   user {
#     name     = var.db_user
#     password = var.db_password
#   }

#   # Хост в нашей подсети/зоне
#   host {
#     zone      = var.zone
#     subnet_id = yandex_vpc_subnet.demo_a.id
#   }
# }


############################################
# Виртуальная машина (бурстовая, дёшево для учёбы)
############################################
resource "yandex_compute_instance" "vm" {
  name        = var.vm_name
  platform_id = "standard-v3"

  resources {
    cores         = var.vm_cores
    memory        = var.vm_memory
    core_fraction = var.vm_fraction
  }

  boot_disk {
    initialize_params {
      image_id = data.yandex_compute_image.ubuntu.image_id
      type     = "network-ssd"
      size     = 15
    }
  }

  network_interface {
    subnet_id          = yandex_vpc_subnet.demo_a.id
    nat                = true
    security_group_ids = [yandex_vpc_security_group.web.id]
  }

  metadata = {
    ssh-keys  = "ubuntu:${file("~/.ssh/id_ed25519.pub")}"
    user-data = <<-CLOUDCFG
    #cloud-config
    runcmd:
      - apt-get update
      - apt-get install -y docker.io
      - usermod -aG docker ubuntu
      - mkdir -p /var/www/html
      - bash -lc 'echo "Hello from VM1" > /var/www/html/index.html'
      - systemctl enable --now docker
      - docker run -d --name app --restart unless-stopped -p 80:80 -v /var/www/html:/usr/share/nginx/html:ro nginx:stable

      - apt-get update
      - apt-get install -y netdata
      - mkdir -p /etc/netdata
      - bash -lc 'printf "[web]\\n  bind to = 0.0.0.0\\n" > /etc/netdata/netdata.conf'
      - systemctl daemon-reload
      - systemctl restart netdata
      - systemctl enable netdata
    CLOUDCFG
  }
}

resource "yandex_compute_instance" "vm2" {
  name        = "${var.vm_name}-2"
  platform_id = "standard-v3"

  resources {
    cores         = var.vm_cores
    memory        = var.vm_memory
    core_fraction = var.vm_fraction
  }

  boot_disk {
    initialize_params {
      image_id = data.yandex_compute_image.ubuntu.image_id
      type     = "network-ssd"
      size     = 15
    }
  }

  network_interface {
    subnet_id          = yandex_vpc_subnet.demo_a.id
    nat                = true
    security_group_ids = [yandex_vpc_security_group.web.id]
  }

  metadata = {
    ssh-keys  = "ubuntu:${file("~/.ssh/id_ed25519.pub")}"
    user-data = <<-CLOUDCFG
    #cloud-config
    runcmd:
      - apt-get update
      - apt-get install -y docker.io
      - usermod -aG docker ubuntu
      - mkdir -p /var/www/html
      - bash -lc 'echo "Hello from VM2" > /var/www/html/index.html'
      - systemctl enable --now docker
      - docker run -d --name app --restart unless-stopped -p 80:80 -v /var/www/html:/usr/share/nginx/html:ro nginx:stable
    CLOUDCFG
  }
}

resource "yandex_lb_target_group" "app_group" {
  name      = "app-targets"
  region_id = "ru-central1"

  target {
    subnet_id = yandex_vpc_subnet.demo_a.id
    address   = yandex_compute_instance.vm.network_interface[0].ip_address
  }

  target {
    subnet_id = yandex_vpc_subnet.demo_a.id
    address   = yandex_compute_instance.vm2.network_interface[0].ip_address
  }
}

resource "yandex_lb_network_load_balancer" "app_lb" {
  name = "app-lb"

  listener {
    name = "http-listener"
    port = 80
    external_address_spec { }
  }

  attached_target_group {
    target_group_id = yandex_lb_target_group.app_group.id

    healthcheck {
      name = "http"
      http_options {
        port = 80
        path = "/"
      }
    }
  }
}


############################################
# Outputs
############################################
output "app_url" {
  value = "http://${yandex_compute_instance.vm.network_interface[0].nat_ip_address}"
}

output "app_url_vm2" {
  value = "http://${yandex_compute_instance.vm2.network_interface[0].nat_ip_address}"
}

output "netdata_url" {
  value = "http://${yandex_compute_instance.vm.network_interface[0].nat_ip_address}:${var.netdata_port}"
}

output "load_balancer_ip" {
  value = flatten(
    yandex_lb_network_load_balancer.app_lb.listener[*].external_address_spec[*].address
  )[0]
}


# output "db_host" {
#   value = yandex_mdb_postgresql_cluster.db.host.0.fqdn
# }

# output "db_user" {
#   value = var.db_user
# }

# output "db_name" {
#   value = var.db_name
# }
